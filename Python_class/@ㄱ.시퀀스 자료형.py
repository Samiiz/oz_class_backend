# 시퀀스 자료형

#  • 문자열 :
#      * 시퀀스형에서 사용할 수 있는 메소드 (count(), index(), split() 등...)
#      * 슬라이싱([ : ], [ : : ])
#      * 요소들로 이루어져 가능했던 기능들(요소 합치기, 요소 찾기 등등)

#  • list
#      * 시퀀스형에서 사용할 수 있는 메소드 (count(), index(), split() 등...)
#      * 슬라이싱([ : ], [ : : ]
#      * 요소들로 이루어져 가능했던 기능들(요소 합치기, 요소 찾기 등등)
#      * list 지원 메소드( append(). insert(). del. sort(). reverse() )
#      * 2차원 배열( [[3,1]. [2.1]])
#      * list는 대괄호[] 로 생성한다.

#  • tuple

#      * 리스트처럼 요소를 일렬로 저장하지만 안에 저장된 요소를 변경, 추가, 삭제 할 수 없다.
#      * 값을 추가, 삭제, 변경할 수 없기 때문에 사용못하는 메소드들이 있다.
#      * tuple의 생성방법은 tuple = 값, 값 또는 tuple = (값, 값)
#      * 그리고 엄청난 비밀을 숨기고 있다.
#      * 튜플은 소괄호() 로 생성한다.

#  • dict
#      * 자료형의 정점에 있는 dict : Dictionary
#      * list, tuple, str, range(범위안에 연속된 데이터를 만드는 시퀀스 였어요)
#        공통적 특징이 있습니다. 데이터들의 연관성이 대부분 없었습니다.
#      * dict는 여러개의 값이 일렬로 정렬되면서도 값까리의 연관 관계를 고려할때 주로 사용
#      * (예: 게임 케릭터 => 힘 :30, 지능: 20, 체력:40, 민첩:90, 운: 1)
#         => 케릭터라는 카테고리가 있죠
#      * dict 생성 방법은 중괄호{} 입니다.

#  • set
#     * set은 수학의 집합을 의미합니다.
#     * 딕셔너리와 같이 순서가 없습니다.
#     * 값의 중복을 허락하지 않습니다. 아주 중요합니다.
#     * set 생성 방법도 중괄호 {} 입니다.
print("good")
